{"version":3,"sources":["Image/car-3d-rotate.gif","components/navbar.js","components/cars-list.js","components/edit-car.js","components/add-car.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","to","Component","Car","props","car","owner","model","make","color","registration_Number","_id","href","onClick","deleteCar","CarsList","bind","state","cars","axios","get","then","response","setState","data","catch","error","console","log","id","delete","this","filter","el","map","currentcar","key","carList","EditCar","onChangeOwner","onChangeModel","onChangeMake","onChangeColor","onChangeRegistrationNumber","onSubmit","match","params","e","target","value","preventDefault","post","res","window","location","type","onChange","AddCar","App","src","Image","alt","path","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3fea3935.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/car-3d-rotate.bc4271b4.gif\";","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../App.css';\n\n//---- The Nav Bar class function---//\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <div className='nav-bar'>\n        <nav className='navbar navbar-dark bg-dark navbar-expand-lg'>\n          {/* ---link for home page */}\n          <Link to='/' className='navbar-brand'>\n            DAVID MILLER CARS\n          </Link>\n          <div className='collpase navbar-collapse'>\n            <ul className='navbar-nav mr-auto'>\n              <li className='navbar-item'>\n                {/* ---link for home page */}\n                <Link to='/' className='nav-link'>\n                  CARS COLLECTION\n                </Link>\n              </li>\n              {/* ---link for add car page */}\n              <li className='navbar-item'>\n                <Link to='/add' className='nav-link'>\n                  ADD NEW CAR\n                </Link>\n              </li>\n            </ul>\n          </div>\n        </nav>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\n//----This is a react function for our table with all cars----//\nconst Car = (props) => (\n  <tr>\n    <td>{props.car.owner}</td>\n    <td>{props.car.model}</td>\n    <td>{props.car.make}</td>\n    <td>{props.car.color}</td>\n    <td>{props.car.registration_Number}</td>\n    <td>\n      <Link to={'/edit/' + props.car._id}>\n        {' '}\n        edit <i className='fas fa-pencil-alt'></i>{' '}\n      </Link>{' '}\n      |{' '}\n      <a\n        href='/'\n        onClick={() => {\n          props.deleteCar(props.car._id);\n        }}\n      >\n        {' '}\n        delete <i className='fas fa-trash'></i>{' '}\n      </a>\n    </td>\n  </tr>\n);\n\n//----This is our class function to get data from the database----//\nclass CarsList extends Component {\n  constructor(props) {\n    super(props);\n\n    //---defining this by the following expression---//\n    this.deleteCar = this.deleteCar.bind(this);\n\n    //--- This will be the initial state our array--//\n    this.state = { cars: [] };\n  }\n\n  componentDidMount() {\n    //---our axios get method for all our cars--//\n    axios\n      .get('http://localhost:5000/cars/')\n      .then((response) => {\n        this.setState({ cars: response.data });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n\n  //---our axios delete method for all our cars--//\n  deleteCar(id) {\n    axios.delete('http://localhost:5000/cars/' + id).then((response) => {\n      console.log(response.data);\n    });\n\n    this.setState({\n      cars: this.state.cars.filter((el) => el._id !== id),\n    });\n  }\n\n  //---function to map all cars object and pass props for the Car function--//\n  carList() {\n    return this.state.cars.map((currentcar) => {\n      return (\n        <Car car={currentcar} deleteCar={this.deleteCar} key={currentcar._id} />\n      );\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Cars Collection</h3>\n        {/* cars table*/}\n        <table className='table'>\n          <thead className='thead-light'>\n            <tr>\n              <th>Owner</th>\n              <th>Model</th>\n              <th>Make</th>\n              <th>Color</th>\n              <th>Registration Number</th>\n            </tr>\n          </thead>\n          <tbody>{this.carList()}</tbody>\n        </table>\n      </div>\n    );\n  }\n}\n\nexport default CarsList;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\n//----This is our class function to edit objects from our database----//\nclass EditCar extends Component {\n  constructor(props) {\n    super(props);\n\n    //---defining this by the following expressions---//\n    this.onChangeOwner = this.onChangeOwner.bind(this);\n    this.onChangeModel = this.onChangeModel.bind(this);\n    this.onChangeMake = this.onChangeMake.bind(this);\n    this.onChangeColor = this.onChangeColor.bind(this);\n    this.onChangeRegistrationNumber = this.onChangeRegistrationNumber.bind(\n      this\n    );\n    this.onSubmit = this.onSubmit.bind(this);\n\n    //--- This will be the initial state for all components--//\n    this.state = {\n      owner: '',\n      model: '',\n      make: '',\n      color: '',\n      registration_Number: '',\n    };\n  }\n\n  componentDidMount() {\n    //---retrieve pros data that matches the id and populate filles for editing---//\n    axios\n      .get('http://localhost:5000/cars/' + this.props.match.params.id)\n      .then((response) => {\n        this.setState({\n          owner: response.data.owner,\n          model: response.data.model,\n          make: response.data.make,\n          color: response.data.color,\n          registration_Number: response.data.registration_Number,\n        });\n      })\n      .catch(function (error) {\n        console.log(error);\n      });\n  }\n\n  //---function to target our car owner form field---//\n  onChangeOwner(e) {\n    this.setState({\n      owner: e.target.value,\n    });\n  }\n\n  //---function to target our car model form field---//\n  onChangeModel(e) {\n    this.setState({\n      model: e.target.value,\n    });\n  }\n\n  //---function to target our car make form field---//\n  onChangeMake(e) {\n    this.setState({\n      make: e.target.value,\n    });\n  }\n\n  //---function to target our car color form field---//\n  onChangeColor(e) {\n    this.setState({\n      color: e.target.value,\n    });\n  }\n\n  //---function to target our car registration number form field---//\n  onChangeRegistrationNumber(e) {\n    this.setState({\n      registration_Number: e.target.value,\n    });\n  }\n\n  //---This is our on submit function, to submit all values on the form---//\n  onSubmit(e) {\n    e.preventDefault();\n\n    //---This will set state for our new object---//\n    const car = {\n      owner: this.state.owner,\n      model: this.state.model,\n      make: this.state.make,\n      color: this.state.color,\n      registration_Number: this.state.registration_Number,\n    };\n\n    console.log(car);\n\n    //---axios post for the submitted changes using props.match id--//\n    axios\n      .post(\n        'http://localhost:5000/cars/update/' + this.props.match.params.id,\n        car\n      )\n      .then((res) => console.log(res.data))\n      .catch((error) => {\n        console.log(error);\n      });\n\n    //---after submit button return to home page---//\n    window.location = '/';\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Edit Car Details</h3>\n        {/* add form */}\n        <form onSubmit={this.onSubmit}>\n          {/* Car owner field */}\n          <div className='form-group'>\n            <label>Car Owner </label>\n            <input\n              type='text'\n              className='form-control'\n              value={this.state.owner}\n              onChange={this.onChangeOwner}\n            />\n          </div>\n          {/* Car model field */}\n          <div className='form-group'>\n            <label>Car Model </label>\n            <input\n              type='text'\n              className='form-control'\n              value={this.state.model}\n              onChange={this.onChangeModel}\n            />\n          </div>\n          {/* Car make field */}\n          <div className='form-group'>\n            <label>Car Make </label>\n            <input\n              type='text'\n              className='form-control'\n              value={this.state.make}\n              onChange={this.onChangeMake}\n            />\n          </div>\n          {/* Car color field */}\n          <div className='form-group'>\n            <label>Car Color </label>\n            <input\n              type='text'\n              className='form-control'\n              value={this.state.color}\n              onChange={this.onChangeColor}\n            />\n          </div>\n          {/* Car Registration Number field */}\n          <div className='form-group'>\n            <label>Car Registration Number </label>\n            <input\n              type='text'\n              className='form-control'\n              value={this.state.registration_Number}\n              onChange={this.onChangeRegistrationNumber}\n            />\n          </div>\n\n          {/* submit button */}\n          <div className='form-group'>\n            <input type='submit' value='Edit Car' className='btn btn-success' />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default EditCar;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\n\n//----This is our class function for our add object method----//\nclass AddCar extends Component {\n  constructor(props) {\n    super(props);\n\n    //---defining this by the following expressions---//\n    this.onChangeOwner = this.onChangeOwner.bind(this);\n    this.onChangeModel = this.onChangeModel.bind(this);\n    this.onChangeMake = this.onChangeMake.bind(this);\n    this.onChangeColor = this.onChangeColor.bind(this);\n    this.onChangeRegistrationNumber = this.onChangeRegistrationNumber.bind(\n      this\n    );\n    this.onSubmit = this.onSubmit.bind(this);\n\n    //--- This will be the initial state for all components--//\n    this.state = {\n      owner: \"\",\n      model: \"\",\n      make: \"\",\n      color: \"\",\n      registration_Number: \"\"\n    };\n  }\n\n  //---function to target our car owner form field---//\n  onChangeOwner(e) {\n    this.setState({\n      owner: e.target.value\n    });\n  }\n\n  //---function to target our car model form field---//\n  onChangeModel(e) {\n    this.setState({\n      model: e.target.value\n    });\n  }\n\n  //---function to target our car make form field---//\n  onChangeMake(e) {\n    this.setState({\n      make: e.target.value\n    });\n  }\n\n  //---function to target our car color form field---//\n  onChangeColor(e) {\n    this.setState({\n      color: e.target.value\n    });\n  }\n\n  //---function to target our car registration number form field---//\n  onChangeRegistrationNumber(e) {\n    this.setState({\n      registration_Number: e.target.value\n    });\n  }\n\n  //---This is our on submit function, to submit all values on the form---//\n  onSubmit(e) {\n    e.preventDefault();\n\n    //---This will set state for our new object---//\n    const car = {\n      owner: this.state.owner,\n      model: this.state.model,\n      make: this.state.make,\n      color: this.state.color,\n      registration_Number: this.state.registration_Number\n    };\n\n    console.log(car);\n    //---axios post for the new submitted object\n    axios\n      .post(\"http://localhost:5000/cars/add\", car)\n      .then(res => console.log(res.data))\n      .catch(error => {\n        console.log(error);\n      });\n    //---after submit button return to home page---//\n    window.location = \"/\";\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Add Car Details</h3>\n        {/* add form */}\n        <form onSubmit={this.onSubmit}>\n          {/* Car owner field */}\n          <div className=\"form-group\">\n            <label>Car Owner </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.owner}\n              onChange={this.onChangeOwner}\n            />\n          </div>\n          {/* Car model field */}\n          <div className=\"form-group\">\n            <label>Car Model </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.model}\n              onChange={this.onChangeModel}\n            />\n          </div>\n          {/* Car make field */}\n          <div className=\"form-group\">\n            <label>Car Make </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.make}\n              onChange={this.onChangeMake}\n            />\n          </div>\n          {/* Car color field */}\n          <div className=\"form-group\">\n            <label>Car Color </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.color}\n              onChange={this.onChangeColor}\n            />\n          </div>\n          {/* Car Registration Number field */}\n          <div className=\"form-group\">\n            <label>Car Registration Number </label>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              value={this.state.registration_Number}\n              onChange={this.onChangeRegistrationNumber}\n            />\n          </div>\n          {/* submit button */}\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Add Car\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default AddCar;\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Image from \"./Image/car-3d-rotate.gif\";\n\n//---below is the imports for all our website files---//\nimport Navbar from \"./components/navbar\";\nimport CarsList from \"./components/cars-list\";\nimport EditCar from \"./components/edit-car\";\nimport AddCar from \"./components/add-car\";\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"image\">\n        <img src={Image} alt=\"3d object\" className=\"img-3d\" />\n      </div>\n      <div className=\"container\">\n        {/* home route */}\n        <Route path=\"/\" exact component={CarsList} />\n        {/* car edit route */}\n        <Route path=\"/edit/:id\" exact component={EditCar} />\n        {/* car add route */}\n        <Route path=\"/add\" exact component={AddCar} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}